import {app, BrowserWindow, Notification} from 'electron';
import * as fs from "fs";
import {MACOS_EXTRA_PATH_DEV, MACOS_EXTRA_PATH_PROD} from "../constants/extra-path";
import * as path from "path";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
    // eslint-disable-line global-require
    app.quit();
}

const createWindow = (): void => {
    // Create the browser window.
    const mainWindow = new BrowserWindow({
        height: 600,
        width: 800,
        webPreferences: {
            sandbox: false,
            nodeIntegration: true,
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
        },
    });

    // and load the index.html of the app.
    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

    // Open the DevTools.
    mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
    createWindow();
    setTimeout(() => {

        let data: string;
        //TODO: add ipcMain
        //TODO: ADD WIN32 PATH
        if (app.isPackaged) {
            const readResult = fs.readFileSync(path.join(MACOS_EXTRA_PATH_PROD, 'release.json'), {encoding: 'utf8'});
            const {ver} = JSON.parse(readResult);
            data = ver;
        } else {
            const readResult = fs.readFileSync(path.join(MACOS_EXTRA_PATH_DEV, 'release.json'), {encoding: 'utf8'});
            const {ver} = JSON.parse(readResult);
            data = ver;
        }

        const date = new Date();
        const notification = new Notification({title: "myapp", body: `${data}:${date.toUTCString()}`});
        notification.show();
    }, 1000);
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
        app.quit();
    }
});

app.on('activate', () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
        createWindow();
    }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
